@page "/vitals"
@using FitnessApp.Shared.Models
@using System.Net.Http.Json
@inject HttpClient Http
@inject NavigationManager NavigationManager

<PageTitle>Vitals Tracker</PageTitle>

<h1>Vitals Tracker</h1>

<div class="row">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h3>Add New Vitals</h3>
            </div>
            <div class="card-body">
                <EditForm Model="@newVitals" OnValidSubmit="@HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-group mb-3">
                        <label for="bloodSugarLevel">Blood Sugar Level:</label>
                        <InputNumber id="bloodSugarLevel" class="form-control" @bind-Value="newVitals.BloodSugarLevel" />
                        <ValidationMessage For="@(() => newVitals.BloodSugarLevel)" />
                    </div>

                    <div class="form-group mb-3">
                        <label for="bloodSugarUnit">Unit:</label>
                        <InputSelect id="bloodSugarUnit" class="form-control" @bind-Value="newVitals.BloodSugarUnit">
                            <option value="mg/dL">mg/dL</option>
                            <option value="mmol/L">mmol/L</option>
                        </InputSelect>
                        <ValidationMessage For="@(() => newVitals.BloodSugarUnit)" />
                    </div>

                    <div class="form-group mb-3">
                        <label for="systolicPressure">Systolic Pressure:</label>
                        <InputNumber id="systolicPressure" class="form-control" @bind-Value="newVitals.SystolicPressure" />
                        <ValidationMessage For="@(() => newVitals.SystolicPressure)" />
                    </div>

                    <div class="form-group mb-3">
                        <label for="diastolicPressure">Diastolic Pressure:</label>
                        <InputNumber id="diastolicPressure" class="form-control" @bind-Value="newVitals.DiastolicPressure" />
                        <ValidationMessage For="@(() => newVitals.DiastolicPressure)" />
                    </div>

                    <button type="submit" class="btn btn-primary">Save</button>
                </EditForm>
            </div>
        </div>
    </div>

    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h3>Vitals History</h3>
            </div>
            <div class="card-body">
                @if (vitals == null)
                {
                    <p><em>Loading...</em></p>
                }
                else if (!vitals.Any())
                {
                    <p>No vitals records found.</p>
                }
                else
                {
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Date</th>
                                <th>Blood Sugar</th>
                                <th>Blood Pressure</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in vitals.OrderByDescending(v => v.Timestamp))
                            {
                                <tr>
                                    <td>@item.Timestamp.ToString("MM/dd/yyyy HH:mm")</td>
                                    <td>@item.BloodSugarLevel @item.BloodSugarUnit</td>
                                    <td>@item.SystolicPressure/@item.DiastolicPressure mmHg</td>
                                    <td>
                                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteVitals(item.Id)">Delete</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private List<Vitals> vitals;
    private Vitals newVitals = new Vitals
    {
        Timestamp = DateTime.Now,
        BloodSugarUnit = "mg/dL",
        SystolicPressure = 120,
        DiastolicPressure = 80
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadVitals();
    }

    private async Task LoadVitals()
    {
        try
        {
            vitals = await Http.GetFromJsonAsync<List<Vitals>>("api/vitals");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading vitals: {ex.Message}");
            vitals = new List<Vitals>();
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/vitals", newVitals);
            response.EnsureSuccessStatusCode();
            
            // Reset form
            newVitals = new Vitals
            {
                Timestamp = DateTime.Now,
                BloodSugarUnit = "mg/dL",
                SystolicPressure = 120,
                DiastolicPressure = 80
            };
            
            await LoadVitals();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving vitals: {ex.Message}");
        }
    }

    private async Task DeleteVitals(int id)
    {
        try
        {
            var response = await Http.DeleteAsync($"api/vitals/{id}");
            response.EnsureSuccessStatusCode();
            await LoadVitals();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting vitals: {ex.Message}");
        }
    }
}
